<!doctype html>
{% assign lang = store.store_locale.iso_code %}
{% assign direction = 'ltr' %}

{% if lang == 'ar' %}
  {% assign direction = 'rtl' %}
{% endif %}

<html lang="{{ lang }}" dir="{{ direction }}">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="canonical" href="{{ request.url }}">

    <title>{{ store.title | default: store.name }}</title>
    <meta name="description" content="{{ store.description | default: store.name }}">

    {{ '_main.css' | asset_url | stylesheet_tag }}

    <link rel="preload" as="script" href="https://cdn.jsdelivr.net/npm/@material/material-color-utilities@0.3.0/index.js">

    {% comment %} TODO: SHETTABA {% endcomment %}
    <script type="module">
      import { argbFromHex, hexFromArgb, CorePalette, Hct } from 'https://cdn.jsdelivr.net/npm/@material/material-color-utilities@0.3.0/index.js';

      const THEME_KEY = 'theme-tokens';
      const primaryColor = document.querySelector('body').dataset.primary.slice(0, 7);

      function toneFromPalette(palette, toneValue) {
        return hexFromArgb(palette.tone(toneValue));
      }

      function generateTokens(isDark, argb, baseHct) {
        const palette = CorePalette.of(argb);
        const error = palette.error;
        const n1 = palette.n1;
        const n2 = palette.n2;

        const toneMap = isDark
          ? { lowest: 4, low: 10, base: 12, high: 17, highest: 22, bg: 6, onBg: 90 }
          : { lowest: 100, low: 96, base: 94, high: 92, highest: 90, bg: 98, onBg: 10 };

        // PRIMARY COLOR
        const primaryTone = isDark ? 80 : 40;
        const onPrimaryTone = isDark ? 20 : 100;

        const primaryHct = Hct.from(baseHct.hue, baseHct.chroma, primaryTone);
        const onPrimaryHct = Hct.from(baseHct.hue, baseHct.chroma, onPrimaryTone);

        const primaryHex = hexFromArgb(primaryHct.toInt());
        const onPrimaryHex = hexFromArgb(onPrimaryHct.toInt());

        // PRIMARY CONTAINER
        const containerTone = isDark ? 30 : 90;
        const onContainerTone = isDark ? 90 : 10;

        const containerHct = Hct.from(baseHct.hue, baseHct.chroma, containerTone);
        const onContainerHct = Hct.from(baseHct.hue, baseHct.chroma, onContainerTone);

        const primaryContainerHex = hexFromArgb(containerHct.toInt());
        const onPrimaryContainerHex = hexFromArgb(onContainerHct.toInt());

        return {
          '--color-primary': primaryHex,
          '--color-on-primary': onPrimaryHex,
          '--color-primary-container': primaryContainerHex,
          '--color-on-primary-container': onPrimaryContainerHex,
          '--color-error': toneFromPalette(error, isDark ? 80 : 40),
          '--color-on-error': toneFromPalette(error, isDark ? 20 : 100),
          '--color-error-container': toneFromPalette(error, isDark ? 30 : 90),
          '--color-on-error-container': toneFromPalette(error, isDark ? 90 : 10),
          '--color-background': toneFromPalette(n1, toneMap.bg),
          '--color-on-background': toneFromPalette(n1, toneMap.onBg),
          '--color-surface': toneFromPalette(n1, toneMap.bg),
          '--color-on-surface': toneFromPalette(n1, toneMap.onBg),
          '--color-surface-container-lowest': toneFromPalette(n1, toneMap.lowest),
          '--color-surface-container-low': toneFromPalette(n1, toneMap.low),
          '--color-surface-container': toneFromPalette(n1, toneMap.base),
          '--color-surface-container-high': toneFromPalette(n1, toneMap.high),
          '--color-surface-container-highest': toneFromPalette(n1, toneMap.highest),
          '--color-surface-variant': toneFromPalette(n2, isDark ? 30 : 90),
          '--color-on-surface-variant': toneFromPalette(n2, isDark ? 80 : 30),
          '--color-outline': toneFromPalette(n2, isDark ? 60 : 50),
          '--color-outline-variant': toneFromPalette(n2, isDark ? 30 : 80),
          '--color-overlay': isDark ? 'rgba(125, 125, 125, 0.3)' : 'rgba(0, 0, 0, 0.3)',
        };
      }

      function combineLightDark(lightTokens, darkTokens) {
        const combined = {};
        for (const key in lightTokens) {
          const lightValue = lightTokens[key];
          const darkValue = darkTokens[key];
          combined[key] = `light-dark(${lightValue}, ${darkValue})`;
        }
        return combined;
      }

      function applyTheme(tokens) {
        const root = document.documentElement;
        for (const [key, value] of Object.entries(tokens)) {
          root.style.setProperty(key, value);
        }

        document.querySelector('[ui-loader]').style.opacity = 0;
        document.querySelector('[ui-loader]').style.visibility = 'hidden';
      }

      function loadCachedTheme() {
        try {
          const cached = JSON.parse(localStorage.getItem(THEME_KEY));
          if (cached && cached.primaryColor === primaryColor) {
            return cached.tokens;
          }
        } catch {}
        return null;
      }

      function saveTheme(tokens) {
        localStorage.setItem(THEME_KEY, JSON.stringify({ primaryColor, tokens }));
      }

      const cached = loadCachedTheme();
      if (cached) {
        applyTheme(cached);
      } else {
        const argb = argbFromHex(primaryColor);
        const hct = Hct.fromInt(argb);
        const lightTokens = generateTokens(false, argb, hct);
        const darkTokens = generateTokens(true, argb, hct);
        const merged = combineLightDark(lightTokens, darkTokens);
        applyTheme(merged);
        saveTheme(merged);
      }
    </script>

    {% comment %} Icons {% endcomment %}
    <link
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,200,0..1,0"
      rel="stylesheet"
    >

    {% comment %} Fonts {% endcomment %}
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&display=swap" rel="stylesheet">

    {% assign slug_initial = store.slug | slice: 0, 1 %}
    {% assign favicon = "data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' width='48' height='48' viewBox='0 0 48 48'><rect width='100%' height='100%' fill='currentColor' rx='24' ry='24'/><text x='50%' y='50%' font-size='40' fill='white' text-anchor='middle' dominant-baseline='middle' font-family='monospace'>[SLUG]</text></svg>" %}
    {% assign favicon = favicon | replace: '[SLUG]', slug_initial %}

    {% if settings.favicon.src %}
      {% assign favicon = settings.favicon.src %}
    {% endif %}

    <link
      {% unless settings.favicon.src != null %}
        type="image/svg+xml"
      {% endunless %}
      rel="shortcut icon"
      href="{{ favicon }}"
    >

    {{ content_for_header }}

    <script src="https://unpkg.com/@youcan/js@latest/dist/index.umd.js" defer></script>
    {{ 'ui.toast.js' | asset_url | script_tag_deferred }}
    {{ '_global.js' | asset_url | script_tag_deferred }}
    {{ '_pubsub.js' | asset_url | script_tag_deferred }}
    {{ '_cart.js' | asset_url | script_tag_deferred }}
    {{ 'core.product-button.js' | asset_url | script_tag_deferred }}
    {{ 'ui.drawer.js' | asset_url | script_tag_deferred }}

    <script>
      window.errorStrings = {
        checkout: '{{ form.errors | first }}',
        insufficient_inventory: '{{ 'error_messages.insufficient_inventory' | t }}',
        rating_is_required: '{{ 'error_messages.rating_is_required' | t }}',
        large_file: '{{ 'error_messages.large_file' | t }}',
      }

      window.combobox = {
        search: '{{ 'general.search' | t }}',
        no_results: '{{ 'general.no-results' | t }}',
      }

      window.successStrings = {
        review_submitted: '{{ 'success_messages.review_submitted' | t }}'
      }

      window.inventoryStatuses = {
        in_stock: '{{ 'product.inventory_in_stock' | t }}',
        in_stock_show_count: '{{ 'product.inventory_in_stock_show_count' | t }}',
        low_stock: '{{ 'product.inventory_low_stock' | t }}',
        low_stock_show_count: '{{ 'product.inventory_low_stock_show_count' | t }}',
        out_of_stock: '{{ 'product.inventory_out_of_stock' | t }}',
      }

      window.productsVariants = {};
    </script>
  </head>
  <body data-primary="{{ settings.primary_color.hex }}" data-theme-mode="{{ settings.them_mode }}">
    {% render 'ui-skip-to-content' %}
    {% render 'ui-loader' %}
    {% render 'ui-toast' %}

    {% section 'announcement-bar' %}
    {% section 'header' %}
    <main layout="main" id="main">
      {{ content_for_layout }}
      {% comment %} {% render 'ui-whatsapp', type: 'fab' %} {% endcomment %}
    </main>
    {% section 'footer' %}
  </body>
</html>
