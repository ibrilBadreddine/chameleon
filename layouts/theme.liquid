<!doctype html>
{% assign lang = store.store_locale.iso_code %}
{% assign direction = 'ltr' %}

{% if lang == 'ar' %}
  {% assign direction = 'rtl' %}
{% endif %}

<html lang="{{ lang }}" dir="{{ direction }}">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="canonical" href="{{ request.url }}">

    <title>{{ store.title | default: store.name }}</title>
    <meta name="description" content="{{ store.description | default: store.name }}">

    <link rel="preload" as="script" href="https://cdn.jsdelivr.net/npm/@material/material-color-utilities@0.3.0/index.js">

    {% comment %} TODO: SHETTABA {% endcomment %}
    <script type="module">
      import { argbFromHex, hexFromArgb, CorePalette, Hct } from 'https://cdn.jsdelivr.net/npm/@material/material-color-utilities@0.3.0/index.js';

      const THEME_KEY = 'theme-tokens';
      const primaryColor = document.querySelector('body').dataset.primary.slice(0, 7);

      // const isDark = !window.matchMedia('(prefers-color-scheme: dark)').matches;
      const isDark = document.querySelector('body').dataset.themeMode === 'dark';
      const toneMap = isDark
        ? { lowest: 4, low: 10, base: 12, high: 17, highest: 22, bg: 6, onBg: 90 }
        : { lowest: 100, low: 96, base: 94, high: 92, highest: 90, bg: 98, onBg: 10 };

      function loadCachedTheme() {
        try {
          const cached = JSON.parse(localStorage.getItem(THEME_KEY));
          if (cached && cached.primaryColor === primaryColor && cached.isDark === isDark) {
            return cached.tokens;
          }
        } catch {}
        return null;
      }

      function saveTheme(tokens) {
        localStorage.setItem(THEME_KEY, JSON.stringify({ primaryColor, isDark, tokens }));
      }

      function applyTheme(tokens) {
        const root = document.documentElement;
        for (const [key, value] of Object.entries(tokens)) {
          root.style.setProperty(key, value);
        }
      }

      function generateTheme() {
        const argb = argbFromHex(primaryColor);
        const hct = Hct.fromInt(argb);
        const baseTone = isDark ? 80 : 40;
        const primaryHex = hexFromArgb(Hct.from(hct.hue, hct.chroma, baseTone).toInt());

        const palette = CorePalette.of(argb);
        const a1 = palette.a1,
          error = palette.error,
          n1 = palette.n1,
          n2 = palette.n2;
        const tone = (g, t) => hexFromArgb(g.tone(t));

        return {
          '--color-primary': primaryHex,
          '--color-on-primary': tone(a1, isDark ? 20 : 100),
          '--color-primary-container': tone(a1, isDark ? 30 : 90),
          '--color-on-primary-container': tone(a1, isDark ? 90 : 10),
          '--color-error': tone(error, isDark ? 80 : 40),
          '--color-on-error': tone(error, isDark ? 20 : 100),
          '--color-background': tone(n1, toneMap.bg),
          '--color-on-background': tone(n1, toneMap.onBg),
          '--color-surface': tone(n1, toneMap.bg),
          '--color-on-surface': tone(n1, toneMap.onBg),
          '--color-surface-container-lowest': tone(n1, toneMap.lowest),
          '--color-surface-container-low': tone(n1, toneMap.low),
          '--color-surface-container': tone(n1, toneMap.base),
          '--color-surface-container-high': tone(n1, toneMap.high),
          '--color-surface-container-highest': tone(n1, toneMap.highest),
          '--color-surface-variant': tone(n2, isDark ? 30 : 90),
          '--color-on-surface-variant': tone(n2, isDark ? 80 : 30),
          '--color-outline': tone(n2, isDark ? 60 : 50),
          '--color-outline-variant': tone(n2, isDark ? 30 : 80),
          '--color-overlay': isDark ? 'rgba(125, 125, 125, 0.3)' : 'rgba(0, 0, 0, 0.3)',
        };
      }

      const cached = loadCachedTheme();
      if (cached) {
        applyTheme(cached);
      } else {
        const generated = generateTheme();
        applyTheme(generated);
        saveTheme(generated);
      }
    </script>

    {% comment %} Icons {% endcomment %}
    <link
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,200,0..1,0"
      rel="stylesheet"
    >

    {% comment %} Fonts {% endcomment %}
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&display=swap" rel="stylesheet">

    {% assign slug_initial = store.slug | slice: 0, 1 %}
    {% assign favicon = "data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' width='48' height='48' viewBox='0 0 48 48'><rect width='100%' height='100%' fill='currentColor' rx='24' ry='24'/><text x='50%' y='50%' font-size='40' fill='white' text-anchor='middle' dominant-baseline='middle' font-family='monospace'>[SLUG]</text></svg>" %}
    {% assign favicon = favicon | replace: '[SLUG]', slug_initial %}

    {% if settings.favicon.src %}
      {% assign favicon = settings.favicon.src %}
    {% endif %}

    <link
      {% unless settings.favicon.src != null %}
        type="image/svg+xml"
      {% endunless %}
      rel="shortcut icon"
      href="{{ favicon }}"
    >

    {{ '_main.css' | asset_url | stylesheet_tag }}
  </head>
  <body data-primary="{{ settings.primary_color.hex }}" data-theme-mode="{{ settings.them_mode }}">
    {% section 'announcement-bar' %}
    {% section 'header' %}
    <main layout="main" id="main">
      {{ content_for_layout }}
      {% comment %} {% render 'ui-whatsapp', type: 'fab' %} {% endcomment %}
    </main>
    {% section 'footer' %}
  </body>
</html>
